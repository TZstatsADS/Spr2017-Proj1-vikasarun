corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.6,15,0.9,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = topicNames, col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.08), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
CreatePartyCharts = function(corpus.list, party.list, topicProbabilties, topicNames, dates)
{
corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.6,15,0.09,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = topicNames, col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.08), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
CreatePartyCharts = function(corpus.list, party.list, topicProbabilties, topicNames, dates)
{
corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.7,18,0.09,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = topicNames, col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.08), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
CreatePartyCharts = function(corpus.list, party.list, topicProbabilties, topicNames, dates)
{
corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.7,20,0.09,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = topicNames, col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.08), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
CreatePartyCharts = function(corpus.list, party.list, topicProbabilties, topicNames, dates)
{
corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.7,24,0.12,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = topicNames, col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.1), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
CreatePartyCharts = function(corpus.list, party.list, topicProbabilties, topicNames, dates)
{
corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.7,20,0.12,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = topicNames, col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.1), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
CreatePartyCharts = function(corpus.list, party.list, topicProbabilties, topicNames, dates)
{
corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.7,20,0.117,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = topicNames, col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.1), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
CreatePartyCharts = function(corpus.list, party.list, topicProbabilties, topicNames, dates)
{
corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.7,20,0.117,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = as.character(c(1:15)), col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.1), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
leg.label = rep(NA, 15)
for(i in 1:length(leg.lab))
{
leg.label[i] = paste("Topic ", i, sep = "")
}
leg.label = rep(NA, 15)
for(i in 1:length(leg.label))
{
leg.label[i] = paste("Topic ", i, sep = "")
}
CreatePartyCharts = function(corpus.list, party.list, topicProbabilties, topicNames, dates)
{
corpus.with.topic = as.data.frame(cbind(corpus.list, topicProbabilities))
numTopic = ncol(topicProbabilities)
grouped.names = rep(NA, numTopic + 4)
grouped.names[1:4] = c("filename", "sentences", "sent.id", "snipets")
for(i in 1:numTopic)
{
grouped.names[(i+4)] = paste("Topic",i, sep = "")
}
corpus.with.topic = group_by(corpus.with.topic, filename)
colnames(corpus.with.topic) = grouped.names
topic.dist = summarise(corpus.with.topic, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
topic.dist = arrange(topic.dist, filename)
topic.dist = cbind(topic.dist, party.list)
topic.dist = group_by(topic.dist, Party)
topic.dist = filter(topic.dist, Party == "Republican" | Party == "Democratic")
topic.dist = dplyr::select(topic.dist, -(name))
party.data.names = grouped.names[c(-2,-3,-4)]
party.data.names = append(party.data.names, "Party")
colnames(topic.dist) = party.data.names
topic.dist = summarise(topic.dist, mean(Topic1), mean(Topic2), mean(Topic3), mean(Topic4), mean(Topic5), mean(Topic6), mean(Topic7), mean(Topic8), mean(Topic9), mean(Topic10), mean(Topic11), mean(Topic12), mean(Topic13), mean(Topic14), mean(Topic15))
leg.label = rep(NA, 15)
for(i in 1:length(leg.label))
{
leg.label[i] = paste("Topic ", i, sep = "")
}
for(i in 1:2)
{
photo.name = paste("PartyBarPlot.",topic.dist$Party[i],".jpg", sep="")
photo.path = paste("../figs/", photo.name, sep = "")
jpeg(filename = photo.path)
chart.name = paste(topic.dist$Party[i], " Topic Emphasis", sep = "")
leg.options = list(0.7,20,0.117,"n")
names(leg.options) = c("cex", "x", "y", "bty")
barplot(as.numeric(topic.dist[i,2:16]), legend.text = leg.label, col = rainbow(length(topicNames)), main = chart.name, ylim = c(0,0.1), args.legend = leg.options)
dev.off()
}
}
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
# setwd("C:/Users/Vikas/OneDrive/Cloud Workspace/Documents/Columbia/Senior/Applied Data Science/Project 1/Spr2017-Proj1-vikasarun/lib")
packages.used=c("tm", "tibble", "qdap",
"RColorBrewer","dplyr",
"tm", "wordcloud", "tidytext", "readr", "topicmodels", "calibrate")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# Load libraries
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
library(topicmodels)
library(qdap)
library(readr)
library(calibrate)
source("../lib/PlotTopicTimeSeries.R")
#Fetching data
folder.path="../data/InauguralSpeeches/"
speech.list=list.files(path = folder.path, pattern = "*.txt")
#Data cleaning
SpeechCorpus = Corpus(DirSource(folder.path))
SpeechCorpus = tm_map(SpeechCorpus, stripWhitespace)
SpeechCorpus = tm_map(SpeechCorpus, content_transformer(tolower))
SpeechCorpus = tm_map(SpeechCorpus, removeWords, stopwords("english"))
SpeechCorpus = tm_map(SpeechCorpus, removePunctuation)
SpeechCorpus = tm_map(SpeechCorpus, removeWords, character(0))
SpeechCorpus = tm_map(SpeechCorpus, stemDocument)
full.dtm = TermDocumentMatrix(SpeechCorpus)
full.td = tidy(full.dtm)
#Creating Lit of Dates
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
#Removing whitespace and punctuation to ensure consistent ordering of names
inaug.dates$PRESIDENT = gsub(" ", "", inaug.dates$PRESIDENT, fixed =TRUE)
inaug.dates$PRESIDENT = gsub(".", "", inaug.dates$PRESIDENT, fixed =TRUE)
inaug.dates = arrange(inaug.dates, PRESIDENT)
#Remove John Tyler, Millard Filmore, Andrew Johnson, Chester Arthur, First Teddy Roosevelt, First Calvin Coolidge, First Harry Truman, First LBJ, Gerald Ford,
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
inaug.dates[c("36","6","18","30"), 2] = c("","","","")
dates = as.vector(as.matrix(t(inaug.dates[-1])))
dates = dates[dates != ""]
#Donald Trumps most positive words
afinn_strong_sentiments = get_sentiments("afinn")
afinn_strong_sentiments = filter(afinn_strong_sentiments, abs(score) >= 2)
colnames(afinn_strong_sentiments) = c("term", "score")
full.td = group_by(full.td, document)
full.td.score = inner_join(full.td, afinn_strong_sentiments)
full.td.score = arrange(full.td.score, desc(score))
as.data.frame(filter(full.td.score, document == "inaugDonaldJTrump-1.txt"))
#Sentiment Analysis on all Speeches. Finding average sentiment scores of top 10 most commonly used words
afinn_strong_sentiments = get_sentiments("afinn")
afinn_strong_sentiments = filter(afinn_strong_sentiments, abs(score) >= 2)
colnames(afinn_strong_sentiments) = c("term", "score")
full.td = group_by(full.td, document)
full.td.score = inner_join(full.td, afinn_strong_sentiments)
full.td.score = arrange(full.td.score, desc(count))
full.td.score = slice(full.td.score, 1:10)
full.scores = summarise(full.td.score, sum(count*score)/sum(count))
#Adding Dates to Sentiment Analysis Data, and ordering sentiment scores by date
full.scores$date = dates
colnames(full.scores) = c("document", "score", "date")
full.scores$date = as.Date(full.scores$date, format = "%m/%d/%Y")
full.scores = arrange(full.scores, date)
photo.name = "../figs/TimeSeriesSentimentScore.jpg"
jpeg(filename = photo.name)
plot(full.scores$date, full.scores$score, xlab = "Year of Speech", ylab = "Sentiment score [-5, 5]", main = "Average Sentiment Scores for all Inauguration Speeches")
dev.off()
#Find second term presidents, mark them on graph to help with visualization
second.term.bool = grepl("*2.txt", full.scores$document)
second.term.scores = full.scores
second.term.scores$termIndicator = second.term.bool
second.term.scores = filter(second.term.scores, termIndicator == TRUE)
second.term.names = substr(second.term.scores$document, 6, nchar(second.term.scores$document)-6)
photo.name = "../figs/TimeSeriesSentimentScore2.jpg"
jpeg(filename = photo.name)
plot(full.scores$date, full.scores$score, xlab = "Year of Speech", ylab = "Sentiment score [-5, 5]", main = "Average Sentiment Scores for all Inauguration Speeches")
points(second.term.scores$date, second.term.scores$score, pch = 3, col = "Red")
dev.off()
#Splits speeches into sentences to prepare for topic mining
full.text = as.data.frame(matrix(nrow=length(speech.list), ncol = 2))
colnames(full.text) = c("text", "filename")
for(i in 1:length(speech.list))
{
current.path = paste(folder.path, speech.list[i], sep = "")
full.text[i,1] = read_file(current.path)
}
full.text[,2] = speech.list
sentence.list=NULL
for(i in 1:length(speech.list))
{
sentences=sent_detect(full.text$text[i],
endmarks = c("?", ".", "!", "|",";"))
if(length(sentences)>0)
{
# colnames(emotions)=paste0("emo.", colnames(emotions))
# in case the word counts are zeros?
sentence.list=rbind(sentence.list,
cbind(speech.list[i],
sentences=as.character(sentences),
sent.id=1:length(sentences)
)
)
}
}
colnames(sentence.list) = c("filename", "sentences", "sent.id")
sentence.list = as.data.frame(sentence.list)
#Create Corpus of Sentence Snippets
corpus.list=sentence.list[2:(nrow(sentence.list)-1), ]
sentence.pre=sentence.list$sentences[1:(nrow(sentence.list)-2)]
sentence.post=sentence.list$sentences[3:(nrow(sentence.list)-1)]
corpus.list$snipets=paste(sentence.pre, corpus.list$sentences, sentence.post, sep=" ")
rm.rows=(1:nrow(corpus.list))[corpus.list$sent.id==1]
rm.rows=c(rm.rows, rm.rows-1)
corpus.list=corpus.list[-rm.rows, ]
docs <- Corpus(VectorSource(corpus.list$snipets))
#writeLines(as.character(docs[[sample(1:nrow(corpus.list), 1)]]))
#Clean Corpus of Sentence Snippets
docs <-tm_map(docs,content_transformer(tolower))
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, stripWhitespace)
docs <- tm_map(docs,stemDocument)
#Create DTM
dtm <- DocumentTermMatrix(docs)
#convert rownames to filenames#convert rownames to filenames
rownames(dtm) <- paste(corpus.list$type, corpus.list$File,corpus.list$Term, corpus.list$sent.id, sep="_")
rowTotals <- apply(dtm , 1, sum) #Find the sum of words in each Document
dtm  <- dtm[rowTotals> 0, ]
corpus.list=corpus.list[rowTotals>0, ]
#Performing 15 Topic Model using LDA
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
#Number of topics
k <- 15
#Run LDA using Gibbs sampling
ldaOut <-LDA(dtm, k, method="Gibbs", control=list(nstart=nstart,
seed = seed, best=best,
burnin = burnin, iter = iter,
thin=thin))
#write out results
#docs to topics
ldaOut.topics <- as.matrix(topics(ldaOut))
table(c(1:k, ldaOut.topics))
write.csv(ldaOut.topics,file=paste("../output/LDAGibbs",k,"DocsToTopics.csv"))
#top 6 terms in each topic
ldaOut.terms <- as.matrix(terms(ldaOut,20))
write.csv(ldaOut.terms,file=paste("../output/LDAGibbs",k,"TopicsToTerms.csv"))
#probabilities associated with each topic assignment
topicProbabilities <- as.data.frame(ldaOut@gamma)
write.csv(topicProbabilities,file=paste("../output/LDAGibbs",k,"TopicProbabilities.csv"))
terms.beta=ldaOut@beta
terms.beta=scale(terms.beta)
topics.terms=NULL
for(i in 1:k){
topics.terms=rbind(topics.terms, ldaOut@terms[order(terms.beta[i,], decreasing = TRUE)[1:7]])
}
topics.terms
ldaOut.terms
topics.hash=c("Economy", "America", "Defense", "Belief", "Election", "Patriotism", "Unity", "Government", "Reform", "Temporal", "WorkingFamilies", "Freedom", "Equality", "Misc", "Legislation")
#Function in for loop defined in PlotTopicTimeSeries.R in ../lib
for(i in 1:length(topics.hash))
{
PlotTopicTimeSeries(corpus.list, topicProbabilities, i, topics.hash[i], dates)
}
#PLotting topic assignments per president, function is in PlotTopicTimeSeries.R in ../lib
CreatePresidentPieCharts_15(corpus.list, topicProbabilities, dates, topics.hash)
#AddingPartyAssignments
party.list = read.csv("../data/InaugurationInfo.csv", header=TRUE)
party.list = mutate(party.list, name = paste(File, Term, sep="-"))
party.list = dplyr::select(party.list, Party, name)
party.list = arrange(party.list, name)
#This function si defined in PlotTopicTimeSeries.R in ../lib
CreatePartyCharts(corpus.list, party.list, topicProbabilities, topics.hash, dates)
