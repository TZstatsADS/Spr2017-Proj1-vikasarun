install.packages("tm")
install.packages("dplyr")
install.packages("wordcloud")
# Load libraries
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
# Load libraries
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
setwd("C:/Users/Vikas/OneDrive/Backup 1-8-17/Documents/Columbia/Senior/Applied Data Science/Project 1/Spr2017-Proj1-vikasarun/lib")
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
SpeechCorpus = Corpus(DirSource(folder.path))
SpeechCorpus = tm_map(SpeechCorpus, stripWhitespace)
SpeechCorpus = tm_map(SpeechCorpus, content_transformer(tolower))
SpeechCorpus = tm_map(SpeechCorpus, removewords, stopwords("english"))
SpeechCorpus = Corpus(DirSource(folder.path))
SpeechCorpus = tm_map(SpeechCorpus, stripWhitespace)
SpeechCorpus = tm_map(SpeechCorpus, content_transformer(tolower))
SpeechCorpus = tm_map(SpeechCorpus, removeword, stopwords("english"))
SpeechCorpus = tm_map(SpeechCorpus, stripWhitespace)
SpeechCorpus = tm_map(SpeechCorpus, content_transformer(tolower))
SpeechCorpus = tm_map(SpeechCorpus, removeWords, stopwords("english"))
SpeechCorpus = tm_map(SpeechCorpus, removePunctuation)
SpeechCorpus = tm_map(SpeechCorpus, removeWords, character(0))
SpeechCorpus = tm_map(SpeechCorpus, stemDocument)
install.packages("SnowballC")
SpeechCorpus = tm_map(SpeechCorpus, stripWhitespace)
SpeechCorpus = tm_map(SpeechCorpus, content_transformer(tolower))
SpeechCorpus = tm_map(SpeechCorpus, removeWords, stopwords("english"))
SpeechCorpus = tm_map(SpeechCorpus, removePunctuation)
SpeechCorpus = tm_map(SpeechCorpus, removeWords, character(0))
SpeechCorpus = tm_map(SpeechCorpus, stemDocument)
print(SpeechCorpus)
install.packages("tidytext")
#Fetching data
folder.path="../data/InauguralSpeeches/"
speeches=list.files(path = folder.path, pattern = "*.txt")
#Data cleaning
SpeechCorpus = Corpus(DirSource(folder.path))
SpeechCorpus = tm_map(SpeechCorpus, stripWhitespace)
SpeechCorpus = tm_map(SpeechCorpus, content_transformer(tolower))
SpeechCorpus = tm_map(SpeechCorpus, removeWords, stopwords("english"))
SpeechCorpus = tm_map(SpeechCorpus, removePunctuation)
SpeechCorpus = tm_map(SpeechCorpus, removeWords, character(0))
SpeechCorpus = tm_map(SpeechCorpus, stemDocument)
full.dtm = DocumentTermMatrix(SpeechCorpus)
full.td = tidy(full.dtm)
library(tidytext)
full.td = tidy(full.dtm)
print(full.td)
full.dtm = TermDocumentMatrix(SpeechCorpus)
full.td = tidy(full.dtm)
print(full.td)
help("tidy")
get_sentiments("afinn")
print(full.td)
small.td = filter(full.td, document = "inaugAbrahamLincoln-1.txt")
small.td = filter(full.td, document == "inaugAbrahamLincoln-1.txt")
print(small.td)
afinn_strong_sentiments = get_sentiments("afinn")
afinn_strong_sentiments = filter(afinn_strong_sentiments, abs(score) >= 2)
help("inner_join")
help("count")
print(afinn_strong_sentiments)
colnames(afinn_strong_sentiments)
colnames(affin_strong_sentiments) = c("term", "score")
colnames(affinn_strong_sentiments) = c("term", "score")
colnames(afinn_strong_sentiments) = c("term", "score")
print(afinn_strong_sentiments)
count(inner_join(small.td, afinn_strong_sentiments),term, sort=TRUE)
small.td.score = inner_join(small.td, afinn_strong_sentiments)
print(small.td.score)
mean(small.td.score$score)
help)soy
help(sory)
help(sort)
order(small.td.score$count)
arrange(small.td.score, count)
small.td.score = arrange(small.td.score, desc(count))
print(small.td.score)
filter(afinn_strong_sentiments, abs(score) == 5)
filter(afinn_strong_sentiments, abs(score) == 4)
small.td.score = arrange(small.td.score, desc(count))
print(small.td.score)
top_10_count = sum(small.td.score$count[1:10])
weighted.score = 0;
for(i in 1:10)
{
weighted.score = weighted.score + small.td.score$score[i]*small.td.score$count[i]/top_10_count
}
help(count)
full.td = group_by(full.td, document)
full.td.score = inner_join(full.td, afinn_strong_sentiments)
full.td.score = arrange(full.td.score, desc(count))
print(full.td.score)
full.td.score = slice(full.td.score, 1:10)
print(full.td.score)
summarise(full.td.score, sum(count*score)/sum(count))
full.scores = summarise(full.td.score, sum(count*score)/sum(count))
help("read.table")
dates = read.table("../data/InaugrationInfo.xlsx", header = TRUE, sep = "\t" )
dates = read.table("../data/InaugurationInfo.xlsx", header = TRUE, sep = "\t" )
dates
dates = read.table("../data/InaugurationDates.xlsx", header = TRUE, sep = "\t" )
dates = read.table("../data/InauguationDates.xlsx", header = TRUE, sep = "\t" )
dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
dates
dates = arrange(dates, PRESIDENT)
dates
as.vector(dates)
help("as.vector")
as.vector(as.matrix(dates))
help(t)
dates
dates[,-1]
as.vector(as.matrix(t(dates[-1])))
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
as.vector(as.matrix(t(inaug.dates[-1])))
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
as.vector(as.matrix(t(inaug.dates[-1])))
dates = as.vector(as.matrix(t(inaug.dates[-1])))
dates = dates[dates != ""]
dates
inaug.dates
inaug.dates[-"John Tyler",]
inaug.dates[-29,-3,-7,-15]
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
inaug.dates = inaug.dates[-29,-3,-7,-15]
inaug.dates = inaug.dates[c(-29,-3,-7,-15)]
inaug.dates
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
inaug.dates
inaug.dates = inaug.dates[c(-29,-3,-7,-15),]
inaug.dates
inaug.dates[c("Theodore Roosevelt","Calvin Coolidge", "Harry S. Truman", "Lyndon B. Johnson"), 1] = ""
inaug.dates[c(36,6,18,30), 1] = ""
inaug.dates[c(36,6,18,30), 1] = c("","","","")
inaug.dates[c(36,6,18,30), 2]
help(droplevels)
droplevels(inaug.dates)
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
droplevels(inaug.dates)
inaug.dates[c(36,6,18,30), 2] = c("","","","")
inaug.dates
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
droplevels(inaug.dates)
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
inaug.dates[,2]
inaug.dates[c(36,6,18,30), 2] = c("","","","")
inaug.dates
inaug.dates = tibble(read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" ))
tibble(inaug.dates)
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
inaugdates[6,]
inaug.dates[6,]
inaug.dates
inaug.dates["6",]
inaug.dates[c("36","6","18","30"), 2] = c("","","","")
inaug.dates
dates = as.vector(as.matrix(t(inaug.dates[-1])))
dates = dates[dates != ""]
full.scores
full.scores$date = dates
colnames(full.scores) = c("document", "score", "date")
full.scores
help("as.Date.character")
full.scores$date = as.Date.character(full.scores$date, format = "%m/%d/%Y")
full.scores$date
full.scores = arrange(full.scores, date)
full.scores
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
#Remove John Tyler, Millard Filmore, Andrew Johnson, Chester Arthur, First Teddy Roosevelt, First Calvin Coolidge, First Harry Truman, First LBJ, Gerald Ford,
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
inaug.dates[c("36","6","18","30"), 2] = c("","","","")
dates = as.vector(as.matrix(t(inaug.dates[-1])))
dates = dates[dates != ""]
full.scores$date = dates
colnames(full.scores) = c("document", "score", "date")
full.scores
arrange(full.score, date)
arrange(full.scores, date)
help(as.Date)
full.scores$date = as.Date(full.scores$date, format = "%m/%d/%Y")
full.scores
afinn_strong_sentiments = get_sentiments("afinn")
afinn_strong_sentiments = filter(afinn_strong_sentiments, abs(score) >= 2)
colnames(afinn_strong_sentiments) = c("term", "score")
full.td = group_by(full.td, document)
full.td.score = inner_join(full.td, afinn_strong_sentiments)
full.td.score = arrange(full.td.score, desc(count))
full.td.score = slice(full.td.score, 1:10)
full.scores = summarise(full.td.score, sum(count*score)/sum(count))
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
#Remove John Tyler, Millard Filmore, Andrew Johnson, Chester Arthur, First Teddy Roosevelt, First Calvin Coolidge, First Harry Truman, First LBJ, Gerald Ford,
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
inaug.dates[c("36","6","18","30"), 2] = c("","","","")
dates = as.vector(as.matrix(t(inaug.dates[-1])))
dates = dates[dates != ""]
full.scores$date = dates
colnames(full.scores) = c("document", "score", "date")
full.scores
full.scores[1:58,]
full.scores$date = as.Date(full.scores$date, format = "%m/%d/%Y")
full.scores
full.scores = arrange(full.scores, date)
full.scores
afinn_strong_sentiments = get_sentiments("afinn")
afinn_strong_sentiments = filter(afinn_strong_sentiments, abs(score) >= 2)
colnames(afinn_strong_sentiments) = c("term", "score")
full.td = group_by(full.td, document)
full.td.score = inner_join(full.td, afinn_strong_sentiments)
full.td.score = arrange(full.td.score, desc(count))
full.td.score = slice(full.td.score, 1:10)
full.scores = summarise(full.td.score, sum(count*score)/sum(count))
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
#Remove John Tyler, Millard Filmore, Andrew Johnson, Chester Arthur, First Teddy Roosevelt, First Calvin Coolidge, First Harry Truman, First LBJ, Gerald Ford,
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
inaug.dates[c("36","6","18","30"), 2] = c("","","","")
dates = as.vector(as.matrix(t(inaug.dates[-1])))
dates = dates[dates != ""]
full.scores$date = dates
colnames(full.scores) = c("document", "score", "date")
print.data.frame(full.scores)
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
inaug.dates = arrange(inaug.dates, PRESIDENT)
inaug.dates
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
inaug.dates[c("36","6","18","30"), 2] = c("","","","")
inaug.dates
t(inaug.dates[-1])
full.scores
print.data.frame(full.scores)
help(gsub)
inaug.dates$PRESIDENT = gsub(" ", "", inaug.dates$PRESIDENT, fixed =TRUE)
inaug.dates
inaug.dates = read.table("../data/InauguationDates.txt", header = TRUE, sep = "\t" )
#Removing whitespace and punctuation to ensure consistent ordering of names
inaug.dates$PRESIDENT = gsub(" ", "", inaug.dates$PRESIDENT, fixed =TRUE)
inaug.dates$PRESIDENT = gsub(".", "", inaug.dates$PRESIDENT, fixed =TRUE)
inaug.dates = arrange(inaug.dates, PRESIDENT)
#Remove John Tyler, Millard Filmore, Andrew Johnson, Chester Arthur, First Teddy Roosevelt, First Calvin Coolidge, First Harry Truman, First LBJ, Gerald Ford,
inaug.dates = inaug.dates[c(-29,-32,-3,-7,-15),]
inaug.dates[c("36","6","18","30"), 2] = c("","","","")
dates = as.vector(as.matrix(t(inaug.dates[-1])))
dates = dates[dates != ""]
full.scores$date = dates
colnames(full.scores) = c("document", "score", "date")
full.scores$date = as.Date(full.scores$date, format = "%m/%d/%Y")
full.scores = arrange(full.scores, date)
print.data.frame(full.scores)
plot(full.scores$date, full.scores$score)
help(plot)
help(grepl)
grepl("*2.txt", full.scores$document)
second.term.bool = grepl("*2.txt", full.scores$document)
second.term.scores = full.scores
second.term.scores$termIndicator = second.term.bool
second.term.scores
second.term.scores = second.term.scores[termIndicator == TRUE]
second.term.scores = second.term.scores[,-"termIndicator"]
second.term.scores
econd.term.bool = grepl("*2.txt", full.scores$document)
second.term.scores = full.scores
second.term.scores$termIndicator = second.term.bool
second.term.scores = second.term.scores[termIndicator == TRUE,]
second.term.scores
second.term.scores = filter(second.term.scores, termIndicator == TRUE)
second.term.scores
help(points)
points(second.term.scores$date, second.term.scores$score, pch = 3, col = "Red")
